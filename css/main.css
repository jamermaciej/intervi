/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0; }

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block; }

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px; }

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
     * Add the correct display in IE.
     */
main {
  display: block; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit; }

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder; }

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic; }

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000; }

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%; }

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block; }

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none; }

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden; }

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible; }

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none; }

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */ }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible; }

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
     * Correct the padding in Firefox.
     */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */ }

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto; }

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block; }

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item; }

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block; }

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block; }

/**
     * Add the correct display in IE.
     */
template {
  display: none; }

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none; }

* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

h1 {
  margin: 0; }

a {
  color: #000;
  text-decoration: none; }

img {
  max-width: 100%; }

ul,
ol {
  list-style-type: none;
  margin: 0;
  padding: 0; }

button:focus {
  outline: none; }

.header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  padding: 58px 130px 30px 64px;
  position: relative; }
  @media (max-width: 678px) {
    .header {
      padding-top: 30px;
      padding-left: 30px;
      padding-right: 0; } }
  .header h1 {
    font-size: 0;
    height: 18px; }
  .header .menu-toggle {
    padding: 0;
    border: none;
    width: 30px;
    height: 30px;
    position: absolute;
    right: 30px;
    top: 25px;
    background: transparent;
    cursor: pointer;
    display: none; }
    @media (max-width: 678px) {
      .header .menu-toggle {
        display: block; } }
    .header .menu-toggle span {
      display: block;
      background: #000;
      width: 100%;
      height: 2px;
      position: relative; }
      .header .menu-toggle span:after, .header .menu-toggle span:before {
        content: '';
        display: block;
        width: 100%;
        height: 2px;
        background: #000;
        position: absolute;
        left: 0;
        -webkit-transition: all 0.4s;
        -o-transition: all 0.4s;
        transition: all 0.4s; }
      .header .menu-toggle span:after {
        top: -10px; }
      .header .menu-toggle span:before {
        top: 10px; }
    .header .menu-toggle.open span {
      background: transparent; }
      .header .menu-toggle.open span:after {
        top: 0;
        -webkit-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
                transform: rotate(45deg); }
      .header .menu-toggle.open span:before {
        top: 0;
        -webkit-transform: rotate(-45deg);
            -ms-transform: rotate(-45deg);
                transform: rotate(-45deg); }
  .header .menu {
    padding: 12px 0 0; }
    @media (max-width: 678px) {
      .header .menu {
        padding: 0;
        overflow: hidden;
        -webkit-transition: width .3s linear;
        -o-transition: width .3s linear;
        transition: width .3s linear;
        position: absolute;
        top: 78px;
        right: 0;
        width: 0;
        background: #FFF;
        text-align: center;
        border-bottom: 1px solid #EFEFEF;
        -webkit-box-shadow: 0 5px 5px 0 rgba(0, 0, 0, 0.1);
                box-shadow: 0 5px 5px 0 rgba(0, 0, 0, 0.1);
        padding-bottom: 20px;
        z-index: 10; } }
    .header .menu__items {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex; }
      @media (max-width: 678px) {
        .header .menu__items {
          -webkit-box-orient: vertical;
          -webkit-box-direction: normal;
              -ms-flex-direction: column;
                  flex-direction: column; } }
    .header .menu__item {
      padding-right: 83px; }
      @media (max-width: 678px) {
        .header .menu__item {
          padding: 10px 0; } }
      .header .menu__item:last-child {
        padding-right: 0; }
    .header .menu__link {
      font-size: 17px;
      position: relative;
      font-family: Futura;
      font-weight: 500; }
      @media (max-width: 678px) {
        .header .menu__link.active, .header .menu__link:hover {
          color: #8641e9; } }
      .header .menu__link.active:after, .header .menu__link:hover:after {
        content: '';
        display: block;
        position: absolute;
        left: 0;
        bottom: -12px;
        width: 100%;
        height: 2px;
        background: #8641e9; }
        @media (max-width: 678px) {
          .header .menu__link.active:after, .header .menu__link:hover:after {
            content: none; } }
    .header .menu.open {
      width: 100%; }

main {
  min-height: calc(100vh - 76px - 119px - 117px); }

.grid-container {
  max-width: 805px;
  margin: 0 auto;
  border: 1px solid #EFEFEF;
  -webkit-box-shadow: 31px 0 250px 0.07px rgba(120, 120, 120, 0.04);
          box-shadow: 31px 0 250px 0.07px rgba(120, 120, 120, 0.04); }

.recipes {
  margin-top: 10px;
  margin-bottom: 107px; }
  .recipes:last-child {
    border-bottom: none; }
  .recipes__header {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    height: 83px;
    border-bottom: 1px solid #EFEFEF;
    padding: 0 45px; }
    @media (max-width: 678px) {
      .recipes__header {
        padding: 0 15px; } }
    .recipes__header div {
      font-size: 18px;
      color: #8641e9;
      font-family: Futura;
      font-weight: 700; }
  .recipes ol {
    counter-reset: recipe; }
    .recipes ol .recipe {
      border-bottom: 1px solid #EFEFEF; }
      .recipes ol .recipe a {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        height: 80px;
        padding: 0 45px;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        position: relative;
        cursor: pointer; }
        @media (max-width: 678px) {
          .recipes ol .recipe a {
            padding: 0 15px; } }
        .recipes ol .recipe a:hover {
          background-color: #FDFDFD; }
        .recipes ol .recipe a:before {
          content: counter(recipe) ".";
          counter-increment: recipe;
          font-family: Futura;
          font-weight: 700;
          color: #D2D2D2;
          font-size: 18px;
          margin-right: 33px; }
        .recipes ol .recipe a:after {
          content: '';
          display: block;
          width: 12px;
          height: 16px;
          background: url("../images/arrow.png") no-repeat;
          position: absolute;
          right: 47px;
          top: 45%;
          -webkit-transition: all 0.3s;
          -o-transition: all 0.3s;
          transition: all 0.3s; }
          @media (max-width: 678px) {
            .recipes ol .recipe a:after {
              right: 15px; } }
      .recipes ol .recipe__name {
        font-size: 15px;
        font-family: Futura;
        font-weight: 700; }
      .recipes ol .recipe__difficulty {
        position: absolute;
        right: 92px; }
        .recipes ol .recipe__difficulty img {
          margin-left: 10px; }
        @media (max-width: 678px) {
          .recipes ol .recipe__difficulty {
            right: 60px; } }
      .recipes ol .recipe__content {
        padding: 0 45px;
        background-color: #FDFDFD;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        max-height: 0;
        overflow: hidden;
        -webkit-transition: max-height 1s;
        -o-transition: max-height 1s;
        transition: max-height 1s; }
        @media (max-width: 678px) {
          .recipes ol .recipe__content {
            -webkit-box-orient: vertical;
            -webkit-box-direction: normal;
                -ms-flex-direction: column;
                    flex-direction: column;
            padding: 0 15px; } }
        .recipes ol .recipe__content h3 {
          font-family: Futura;
          font-weight: 700;
          color: #D2D2D2;
          font-size: 14px;
          line-height: 18px;
          margin: 30px 0; }
        .recipes ol .recipe__content .ingredients {
          width: 50%; }
          @media (max-width: 678px) {
            .recipes ol .recipe__content .ingredients {
              width: 100%; } }
          .recipes ol .recipe__content .ingredients ul li {
            font-size: 14px;
            line-height: 28px;
            letter-spacing: 0.12em;
            font-family: "Montserrat", sans-serif; }
            .recipes ol .recipe__content .ingredients ul li:before {
              content: '\2022 ';
              color: #8641e9;
              padding-right: 8px;
              font-size: 18px; }
        .recipes ol .recipe__content .preparation {
          max-width: 310px; }
          @media (max-width: 678px) {
            .recipes ol .recipe__content .preparation {
              max-width: 100%; } }
          .recipes ol .recipe__content .preparation p {
            font-size: 14px;
            line-height: 28px;
            -webkit-hyphens: auto;
                -ms-hyphens: auto;
                    hyphens: auto;
            padding-bottom: 50px;
            letter-spacing: 0.08em;
            font-family: "Montserrat", sans-serif; }
      .recipes ol .recipe.active {
        background-color: #FDFDFD; }
      .recipes ol .recipe.active .recipe__content {
        max-height: 800px; }
      .recipes ol .recipe.active a:after {
        -webkit-transform: translateY(-50%) rotate(180deg);
            -ms-transform: translateY(-50%) rotate(180deg);
                transform: translateY(-50%) rotate(180deg); }

.contact {
  margin-top: 60px;
  margin-bottom: 167px;
  padding: 85px 103px 100px 107px; }
  @media (max-width: 678px) {
    .contact {
      padding-left: 15px;
      padding-right: 15px; } }
  .contact h2 {
    margin: 0;
    font-family: Futura;
    font-weight: 700;
    font-size: 18px;
    color: #8641e9;
    margin-bottom: 75px; }
  .contact form .form-messages {
    margin-bottom: 20px;
    padding: 20px 10px;
    border: 2px solid red; }
  .contact form .form-row {
    margin-bottom: 40px;
    position: relative; }
    .contact form .form-row.error input {
      border-color: red; }
    .contact form .form-row.error .error-message {
      color: #FFF;
      background: #DB2828;
      border: 1px solid #DB2828;
      font-size: 12px;
      position: relative;
      bottom: -7px;
      display: inline-block;
      padding: 7px 10px;
      line-height: 1;
      border-radius: 4px;
      -webkit-transition: background .1s;
      -o-transition: background .1s;
      transition: background .1s; }
      .contact form .form-row.error .error-message:after {
        content: '';
        display: block;
        position: absolute;
        left: 50%;
        top: 0;
        -webkit-transform: translate(-50%, -50%) rotate(45deg);
            -ms-transform: translate(-50%, -50%) rotate(45deg);
                transform: translate(-50%, -50%) rotate(45deg);
        width: 10px;
        height: 10px;
        background: #DB2828; }
    .contact form .form-row:last-child {
      margin-bottom: 0; }
    .contact form .form-row input {
      border: none;
      border-bottom: 1px solid #D7D7D7;
      font-size: 14px;
      width: 100%;
      height: 50px; }
      .contact form .form-row input + label {
        font-size: 14px;
        position: absolute;
        left: 0;
        -webkit-transition: all .3s;
        -o-transition: all .3s;
        transition: all .3s;
        opacity: 0;
        visibility: hidden;
        top: 10px;
        color: #D7D7D7; }
      .contact form .form-row input:focus {
        outline: none; }
        .contact form .form-row input:focus + label {
          opacity: 1;
          visibility: visible;
          top: -10px; }
        .contact form .form-row input:focus::-webkit-input-placeholder {
          opacity: 0; }
        .contact form .form-row input:focus:-ms-input-placeholder {
          opacity: 0; }
        .contact form .form-row input:focus::-ms-input-placeholder {
          opacity: 0; }
        .contact form .form-row input:focus::placeholder {
          opacity: 0; }
      .contact form .form-row input::-webkit-input-placeholder {
        color: #000; }
      .contact form .form-row input:-ms-input-placeholder {
        color: #000; }
      .contact form .form-row input::-ms-input-placeholder {
        color: #000; }
      .contact form .form-row input::placeholder {
        color: #000; }
  .contact form button {
    border: none;
    background: blue;
    color: #FFF;
    display: block;
    margin: 0 auto;
    margin-top: 100px;
    font-size: 14px;
    font-family: Futura;
    font-weight: 700;
    background: #5D00E1;
    border: 1px solid #5D00E1;
    width: 180px;
    height: 50px;
    border-radius: 10px;
    -webkit-transition: all 0.4s ease-in-out;
    -o-transition: all 0.4s ease-in-out;
    transition: all 0.4s ease-in-out;
    cursor: pointer; }
    .contact form button:hover {
      color: #5D00E1;
      background: #FFF; }

.footer {
  background: #f9f9f9;
  height: 76px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  left: 0;
  right: 0;
  bottom: 0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
